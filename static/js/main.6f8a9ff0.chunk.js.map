{"version":3,"sources":["post/Clock.js","post/Toggle.js","App.js","reportWebVitals.js","index.js"],"names":["Clock","props","state","inputMinutes","inputSeconds","time","seconds","timer","startTimer","bind","countDown","handleChange","secs","divisor_for_minutes","divisor_for_seconds","Math","floor","ceil","timeLeftVar","this","secondsToTime","setState","event","parseInt","isNaN","push","setInterval","preventDefault","length","i","clearInterval","alert","target","name","value","id","onSubmit","type","placeholder","onChange","m","s","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SA8GeA,E,kDAxGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,aAAc,EACdC,aAAc,EACdC,KAAM,GACNC,QAAS,GAEX,EAAKC,MAAQ,GACb,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBAXH,E,iDAcnB,SAAcG,GACZ,IAEIC,EAAsBD,EAAI,KAG1BE,EAAsBD,EAAsB,GAQhD,MALU,CACR,EATUE,KAAKC,MAAMJ,EAAI,MAUzB,EAPYG,KAAKC,MAAMH,EAAsB,IAQ7C,EALYE,KAAKE,KAAKH,M,+BAU1B,WACE,IAAII,EAAcC,KAAKC,cAAcD,KAAKjB,MAAMI,SAChDa,KAAKE,SAAS,CAAChB,KAAMa,M,wBAGvB,SAAWI,GAAQ,IAAD,OACZhB,EAAU,EAEVH,EAAeoB,SAASJ,KAAKjB,MAAMC,cACnCC,EAAemB,SAASJ,KAAKjB,MAAME,cAEnCoB,MAAMrB,KACRA,EAAe,GAGbqB,MAAMpB,KACRA,EAAe,GAGjBE,GAA0B,GAAfH,EAAoBC,EAE/Be,KAAKE,SAAS,CACZf,QAASA,IACR,WACG,EAAKJ,MAAMI,QAAU,GACvB,EAAKC,MAAMkB,KAAKC,YAAY,EAAKhB,UAAW,SAIhDY,EAAMK,mB,uBAGR,WAEE,GADuBR,KAAKZ,MAAMqB,OAAS,EAEzC,IAAK,IAAIC,EAAI,EAAGA,EAAIV,KAAKZ,MAAMqB,OAAS,EAAGC,IAEzCC,cAAcX,KAAKZ,MAAMsB,IAK7B,IAAIvB,EAAUa,KAAKjB,MAAMI,QAAU,EACnCa,KAAKE,SAAS,CAAChB,KAAMc,KAAKC,cAAcd,GAAUA,QAASA,IAGvDA,GAAW,IACbwB,cAAcX,KAAKZ,MAAMY,KAAKZ,MAAMqB,OAAS,IAC7CG,MAAM,uB,0BAIV,SAAaT,GACXH,KAAKE,SAAL,eACGC,EAAMU,OAAOC,KAAOX,EAAMU,OAAOE,U,oBAKtC,WACE,OAAQ,qBAAKC,GAAG,gBAAR,SACN,sBAAKA,GAAG,cAAR,uBAEE,uBAAMA,GAAG,YAAYC,SAAUjB,KAAKX,WAApC,UACE,uBAAO6B,KAAK,OAAOJ,KAAK,eAAeK,YAAY,UAAUC,SAAUpB,KAAKR,eAC5E,uBAAO0B,KAAK,OAAOJ,KAAK,eAAeK,YAAY,UAAUC,SAAUpB,KAAKR,eAC5E,uBAAO0B,KAAK,SAASH,MAAM,mBAL/B,cAOcf,KAAKjB,MAAMG,KAAKmC,EAP9B,iBAOiDrB,KAAKjB,MAAMG,KAAKoC,EAPjE,oB,GA7FcC,IAAMC,WCFLD,IAAMC,UCWZC,MARf,WACE,OACE,8BACA,cAAC,EAAD,OCGWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6f8a9ff0.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Clock.css';\nimport './youtube.css'\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputMinutes: 0,\n      inputSeconds: 0,\n      time: {},\n      seconds: 0\n    };\n    this.timer = [];\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  secondsToTime(secs) {\n    let hours = Math.floor(secs / (60 * 60));\n\n    let divisor_for_minutes = secs % (60 * 60);\n    let minutes = Math.floor(divisor_for_minutes / 60);\n\n    let divisor_for_seconds = divisor_for_minutes % 60;\n    let seconds = Math.ceil(divisor_for_seconds);\n\n    let obj = {\n      \"h\": hours,\n      \"m\": minutes,\n      \"s\": seconds\n    };\n    return obj;\n  }\n\n  componentDidMount() {\n    let timeLeftVar = this.secondsToTime(this.state.seconds);\n    this.setState({time: timeLeftVar});\n  }\n\n  startTimer(event) {\n    let seconds = 0;\n\n    let inputMinutes = parseInt(this.state.inputMinutes);\n    let inputSeconds = parseInt(this.state.inputSeconds);\n\n    if (isNaN(inputMinutes)) {\n      inputMinutes = 0;\n    }\n\n    if (isNaN(inputSeconds)) {\n      inputSeconds = 0;\n    }\n\n    seconds += inputMinutes * 60 + inputSeconds;\n\n    this.setState({\n      seconds: seconds\n    }, () => {\n      if (this.state.seconds > 0) {\n        this.timer.push(setInterval(this.countDown, 1000));\n      }\n    });\n\n    event.preventDefault();\n  }\n\n  countDown() {\n    let moreThanOneTimer = this.timer.length > 1;\n    if (moreThanOneTimer) {\n      for (let i = 0; i < this.timer.length - 1; i++) {\n        // If more than one timer, clear all previous timers except latest\n        clearInterval(this.timer[i]);\n      }\n    }\n\n    // Remove one second, set state so a re-render happens.\n    let seconds = this.state.seconds - 1;\n    this.setState({time: this.secondsToTime(seconds), seconds: seconds});\n\n    // Check if we're at zero.\n    if (seconds <= 0) {\n      clearInterval(this.timer[this.timer.length - 1]);\n      alert(\"Your time is up!\");\n    }\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n\n  }\n\n  render() {\n    return (<div id=\"clock-wrapper\">\n      <div id=\"inner-clock\">\n        Set timer?\n        <form id=\"set-timer\" onSubmit={this.startTimer}>\n          <input type=\"text\" name=\"inputMinutes\" placeholder=\"Minutes\" onChange={this.handleChange}/>\n          <input type=\"text\" name=\"inputSeconds\" placeholder=\"Seconds\" onChange={this.handleChange}/>\n          <input type=\"submit\" value=\"Start timer\"/>\n        </form>\n        Time left: {this.state.time.m} minutes &nbsp; {this.state.time.s} seconds\n      </div>\n    </div>);\n  }\n}\nexport default Clock;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {isToggleOn: true};\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState(prevState => ({\n      isToggleOn: !prevState.isToggleOn\n    }));\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n      {this.state.isToggleOn ? 'Start timer' : 'End timer'}\n      </button>\n    );\n  }\n}\n\nexport default Toggle;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport Clock from './post/Clock.js';\nimport Toggle from './post/Toggle.js';\n\nfunction App() {\n  return (\n    <div>\n    <Clock />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}