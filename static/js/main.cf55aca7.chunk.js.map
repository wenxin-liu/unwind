{"version":3,"sources":["components/timer/Timer.js","pages/index.js","App.js","index.js"],"names":["Timer","props","state","open","inputMinutes","inputSeconds","time","seconds","buttonMessage","handleClickOpen","bind","handleClose","timer","startTimer","countDown","handleChange","secs","divisor_for_minutes","divisor_for_seconds","Math","floor","ceil","timeLeftVar","this","secondsToTime","setState","event","parseInt","isNaN","push","setInterval","preventDefault","length","i","clearInterval","alert","target","name","value","StyledEngineProvider","injectFirst","Button","variant","id","size","startIcon","onClick","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","fullWidth","autoComplete","margin","label","onChange","DialogActions","React","Home","console","log","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf55aca7.chunk.js","sourcesContent":["import * as React from 'react';\n\nimport AlarmIcon from '@mui/icons-material/Alarm';\nimport Button from '@mui/material/Button';\n\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\nimport {StyledEngineProvider} from '@mui/material/styles';\n\nimport './Timer.css'\n\n//TODO: refactor and clean up now unused seconds / inputSeconds logic\n//TODO: break up into smaller / two classes?, form dialog and clock?\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      inputMinutes: 0,\n      inputSeconds: 0,\n      time: {},\n      seconds: 0,\n      buttonMessage: \"Add\"\n    };\n\n    this.handleClickOpen = this.handleClickOpen.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n\n    this.timer = [];\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  secondsToTime(secs) {\n    let hours = Math.floor(secs / (60 * 60));\n\n    let divisor_for_minutes = secs % (60 * 60);\n    let minutes = Math.floor(divisor_for_minutes / 60);\n\n    let divisor_for_seconds = divisor_for_minutes % 60;\n    let seconds = Math.ceil(divisor_for_seconds);\n\n    let obj = {\n      \"h\": hours,\n      \"m\": minutes,\n      \"s\": seconds\n    };\n    return obj;\n  }\n\n  componentDidMount() {\n    let timeLeftVar = this.secondsToTime(this.state.seconds);\n    this.setState({time: timeLeftVar});\n  }\n\n  startTimer(event) {\n    this.handleClose();\n\n    this.setState({buttonMessage: \"On\"});\n\n    let seconds = 0;\n\n    let inputMinutes = parseInt(this.state.inputMinutes);\n    let inputSeconds = parseInt(this.state.inputSeconds);\n\n    if (isNaN(inputMinutes)) {\n      inputMinutes = 0;\n    }\n\n    if (isNaN(inputSeconds)) {\n      inputSeconds = 0;\n    }\n\n    seconds += inputMinutes * 60 + inputSeconds;\n\n    this.setState({\n      seconds: seconds\n    }, () => {\n      if (this.state.seconds > 0) {\n        this.timer.push(setInterval(this.countDown, 1000));\n      }\n    });\n\n    event.preventDefault();\n  }\n\n  countDown() {\n    let moreThanOneTimer = this.timer.length > 1;\n    if (moreThanOneTimer) {\n      for (let i = 0; i < this.timer.length - 1; i++) {\n        // If more than one timer, clear all previous timers except latest\n        clearInterval(this.timer[i]);\n      }\n    }\n\n    // Remove one second, set state so a re-render happens.\n    let seconds = this.state.seconds - 1;\n    this.setState({time: this.secondsToTime(seconds), seconds: seconds});\n\n    // Check if we're at zero.\n    if (seconds <= 0) {\n      clearInterval(this.timer[this.timer.length - 1]);\n\n      alert(\"Your time is up!\");\n\n      this.setState({buttonMessage: \"Add\"});\n    }\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n\n  }\n\n  handleClickOpen() {\n    this.setState({open: true});\n  }\n\n  handleClose() {\n    this.setState({open: false});\n  }\n\n  render() {\n    return (<StyledEngineProvider injectFirst=\"injectFirst\">\n      <div>\n\n        <Button variant=\"outlined\" id=\"timer-button\" size=\"large\" startIcon={<AlarmIcon/>} onClick={this.handleClickOpen}>\n          {this.state.buttonMessage}\n        </Button>\n\n        <Dialog open={this.state.open} onClose={this.handleClose}>\n          <DialogTitle>Add Timer?</DialogTitle>\n\n          <DialogContent>\n            <DialogContentText>\n              Alert when break is over and it's time to go back to work.\n            </DialogContentText>\n\n            <TextField autoFocus=\"autoFocus\" fullWidth=\"fullWidth\" autoComplete=\"off\" margin=\"normal\" id=\"outlined-helperText\" label=\"Minutes\" onChange={this.handleChange} name=\"inputMinutes\"/>\n          </DialogContent>\n\n          <DialogActions>\n            <Button onClick={this.handleClose}>Cancel</Button>\n            <Button onClick={this.startTimer}>Submit</Button>\n          </DialogActions>\n\n        </Dialog>\n\n      </div>\n    </StyledEngineProvider>);\n  }\n}\n\nexport default Timer;\n","import React from 'react';\nimport Button from '@mui/material/Button';\n\nimport './index.css';\n\nfunction startVideo() {\n  console.log(\"button clicked\");\n  return \"\"\n}\n\nconst Home = () => {\n  return (\n    <div id=\"landing-page-flex-container\">\n      <div id=\"landing-page-flex-item-text\">\n        <p id=\"pre-text\">Let's go to...</p>\n        <p id=\"location\">Maldives?</p>\n      </div>\n      <div id=\"landing-page-flex-item-button\">\n        <Button\n          variant=\"contained\"\n          id=\"start-button\"\n          onClick={startVideo()}>\n          START\n        </Button>\n      </div>\n    </div>)\n};\n\nexport default Home;\n","import React from 'react';\nimport FormDialog from './components/timer/Timer'\nimport './App.css';\nimport Home from './pages';\n\nfunction App() {\n  return (\n    <div>\n      <Home/>\n      <FormDialog />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}